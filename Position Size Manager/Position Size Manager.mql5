#property copyright "Copyright 2022, kevinhhl"
#property link      "kevinhhl.com"
#property version   "1.20220916"
#property description "Lotsize management + Auto placement of intial SL and TP."

#include <Controls\Dialog.mqh>
#include <Controls\Button.mqh>
#include <Trade\Trade.mqh> 
#include <Trade\PositionInfo.mqh>

// Preprosessor (Ref: https://www.mql5.com/en/docs/basis/preprosessor)\

    // <Controls\Dialog.mqh>
    // indents and gaps
    #define INDENT_LEFT                         (11)
    #define INDENT_TOP                          (11)
    #define INDENT_RIGHT                        (11)
    #define INDENT_BOTTOM                       (11)
    #define CONTROLS_GAP_X                      (10)
    #define CONTROLS_GAP_Y                      (5)
    // indication area
    #define EDIT_HEIGHT                         (20)

    //<Controls\Button.mqh>
    #define BUTTON_WIDTH                        (100) 
    #define BUTTON_HEIGHT                       (20) 

//+------------------------------------------------------------------+
//| Class CControlsDialog                                            |
//+------------------------------------------------------------------+
class CControlsDialog : public CAppDialog
{
    private:
        CButton     m_button1;                       // the button object
        CButton     m_button2;                       // the button object
        CButton     m_button3;                       // the fixed button object
    
    public:
                    CControlsDialog(void);
                    ~CControlsDialog(void);
    //--- create
    virtual bool    Create(const long chart,const string name,const int subwin,const int x1,const int y1,const int x2,const int y2);
    //--- chart event handler
    virtual bool    OnEvent(const int id,const long &lparam,const double &dparam,const string &sparam);
    
    protected:
    //--- create dependent controls
    bool            CreateButton1(void);
    bool            CreateButton2(void);
    bool            CreateButton3(void);
    //--- handlers of the dependent controls events
    void            OnClickButton1_buy(void);
    void            OnClickButton2_sell(void);
    void            OnClickButton3_flatten(void);
};

// Mapping event handlers
EVENT_MAP_BEGIN(CControlsDialog)
ON_EVENT(ON_CLICK,m_button1,OnClickButton1_buy)
ON_EVENT(ON_CLICK,m_button2,OnClickButton2_sell)
ON_EVENT(ON_CLICK,m_button3,OnClickButton3_flatten)
EVENT_MAP_END(CAppDialog)

// Constructor
CControlsDialog::CControlsDialog(void) { }

// Destructor 
CControlsDialog::~CControlsDialog(void) { }

// Create Dialog
bool CControlsDialog::Create(const long chart,const string name,
 const int subwin,const int x1,const int y1,const int x2,const int y2)
{
    if(!CAppDialog::Create(chart,name,subwin,x1,y1,x2,y2))
        return(false);
        
    if(!CreateButton1())
        return(false);
    if(!CreateButton2())
        return(false);
    if(!CreateButton3())
        return(false);
        
    return(true);
}
// Create Button1
bool CControlsDialog::CreateButton1(void) 
{
    
    int x1=INDENT_LEFT;
    int y1=INDENT_TOP+(EDIT_HEIGHT+CONTROLS_GAP_Y);
    int x2=x1+BUTTON_WIDTH;
    int y2=y1+BUTTON_HEIGHT;
    
    if(!m_button1.Create(m_chart_id,m_name+"Buy",m_subwin,x1,y1,x2,y2))
        return(false);
    if(!m_button1.Text("Buy"))
        return(false);
    if(!Add(m_button1))
        return(false);
    
    return(true);
}
// Create Button2
bool CControlsDialog::CreateButton2(void) 
    {    
        int x1=INDENT_LEFT+(BUTTON_WIDTH+CONTROLS_GAP_X);
        int y1=INDENT_TOP+(EDIT_HEIGHT+CONTROLS_GAP_Y);
        int x2=x1+BUTTON_WIDTH;
        int y2=y1+BUTTON_HEIGHT;
        
        if(!m_button2.Create(m_chart_id,m_name+"Sell",m_subwin,x1,y1,x2,y2))
            return(false);
        if(!m_button2.Text("Sell"))
            return(false);
        if(!Add(m_button2))
            return(false);
            
        return(true);
    }

// Create Button3
bool CControlsDialog::CreateButton3(void) 
{
    int x1=INDENT_LEFT+2*(BUTTON_WIDTH+CONTROLS_GAP_X);
    int y1=INDENT_TOP+(EDIT_HEIGHT+CONTROLS_GAP_Y);
    int x2=x1+BUTTON_WIDTH;
    int y2=y1+BUTTON_HEIGHT;
    
    if(!m_button3.Create(m_chart_id,m_name+"Flatten",m_subwin,x1,y1,x2,y2))
        return(false);
    if(!m_button3.Text("Flatten"))
        return(false);
    if(!Add(m_button3))
        return(false);
    
    return(true);
}

//+------------------------------------------------------------------+
//| Global Variables                                                 |
//+------------------------------------------------------------------+
CControlsDialog ExtDialog;

// Inputs
input double    input_risk_amt=50;          // Risk per trade trade
input double    input_pointsmulti=1;        // $ per point multiplier
input double    input_max_lot=1;            // Max lot size
input int       input_atr_period=10;        // Stoploss: ATR Period 
input double    input_atr_multi=3;          // Stoploss: ATR Multi
input double    input_rrr=1;                // TP limit: Risk-to-reward

// Handles
int             handle_atr;

// Buffers
double          buff_atr[];

// Structures
CTrade          m_Trade;
CPositionInfo   m_Position; 

// To be modified by calc_ordersize(), called during OnTick()
double          sl_buffer;
string          sl_buffer_str;
double          ordersize;
double          bidprice;
double          askprice;

//+------------------------------------------------------------------+
//| EA Functions
//+------------------------------------------------------------------+
int OnInit()
{
    handle_atr=iATR(_Symbol,PERIOD_CURRENT, input_atr_period); 
    if(handle_atr==INVALID_HANDLE) { Print("handle_atr: Failed to get the indicator handle"); return(-1); }
    ArraySetAsSeries(buff_atr,true);

    string _title = "Position Size Manager [KL] - ATR("+IntegerToString(input_atr_period)+") x "+DoubleToString(input_atr_multi,2) 
     + "; [" + DoubleToString(input_risk_amt,0) + "/" + DoubleToString(input_pointsmulti,0) + "]";
    if(!ExtDialog.Create(0,_title,0,40,40,400,230)) // (chart,name,subwin,x1,y1,x2,y2))
        return(INIT_FAILED);
    
    ExtDialog.Run();
    
    return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason)
{
    IndicatorRelease(handle_atr);
    ArrayFree(buff_atr);
    Comment(""); // clear comments
    ExtDialog.Destroy(reason);
}

void OnTick() 
{
    askprice=SymbolInfoDouble(_Symbol,SYMBOL_ASK);
    bidprice=SymbolInfoDouble(_Symbol,SYMBOL_BID);
    ordersize = MathMin(calc_ordersize(), input_max_lot);
}

void OnChartEvent(const int id,         // event ID  
                  const long& lparam,   // event parameter of the long type
                  const double& dparam, // event parameter of the double type
                  const string& sparam) // event parameter of the string type
{
    ExtDialog.ChartEvent(id,lparam,dparam,sparam);
}
// Helper functions
double calc_ordersize()
{
    CopyBuffer(handle_atr, 0, 1, 2, buff_atr);
    sl_buffer = buff_atr[0] * input_atr_multi;
    sl_buffer_str = "ATR("+ IntegerToString(input_atr_period)+") x " + DoubleToString(input_atr_multi,2) + "="+ DoubleToString(sl_buffer,2);
    double output = input_risk_amt / sl_buffer / input_pointsmulti;
    Comment(_Symbol + " Lot size = " + DoubleToString(NormalizeDouble(output,2)));
    return output;
}
//+------------------------------------------------------------------+
//| Event handlers
//+------------------------------------------------------------------+

void CControlsDialog::OnClickButton1_buy(void)
{   
    while(m_Position.Select(_Symbol) && m_Position.PositionType()==POSITION_TYPE_SELL) {
        m_Trade.PositionClose(_Symbol);
    }

    double slp = bidprice - sl_buffer;
    double tpp = bidprice + sl_buffer * input_rrr;
    m_Trade.Buy(NormalizeDouble(ordersize,2), _Symbol, NormalizeDouble(bidprice,2), NormalizeDouble(slp,2), NormalizeDouble(tpp,2));
}
  
void CControlsDialog::OnClickButton2_sell(void)
{    
    while(m_Position.Select(_Symbol) && m_Position.PositionType()==POSITION_TYPE_BUY) {
        m_Trade.PositionClose(_Symbol);
    }
    
    double slp = askprice + sl_buffer;
    double tpp = askprice - sl_buffer * input_rrr;
    m_Trade.Sell(NormalizeDouble(ordersize,2),_Symbol, NormalizeDouble(askprice,2), NormalizeDouble(slp,2), NormalizeDouble(tpp,2));
}
  
void CControlsDialog::OnClickButton3_flatten(void)
{
    Comment(_Symbol + ": Flatten");
    while(m_Position.Select(_Symbol)) {
        m_Trade.PositionClose(_Symbol);
    }
}
